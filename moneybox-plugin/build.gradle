import java.nio.file.Files

import static java.nio.file.Files.copy
import static java.nio.file.Files.deleteIfExists
import static java.nio.file.Paths.get
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

def artifactName = 'Moneybox.jar'
def environments = ['arclight', 'catserver', 'crucible']

// Distribute artifact to environments
tasks.register('distribute') {
    def artifact = get "$project.projectDir/build/libs/$artifactName"
    if (Files.notExists(artifact)) {
        return
    }
    environments.each {
        def destination = get "D:/Servers/$it/plugins/$artifactName"
        copy artifact, destination, REPLACE_EXISTING
    }
}

// Delete distributed artifacts from environments
tasks.register('deleteDistributedArtifacts') {
    environments.each {
        def destination = get "D:/Servers/$it/plugins/$artifactName"
        deleteIfExists destination
    }
}

tasks {
    shadowJar {
        minimize()

        archiveFileName = artifactName

        ['cloud.commandframework', 'io.leangen.geantyref', 'io.netty', 'com.google.common.base'].each {
            relocate(it, "${rootProject.group}.${rootProject.name}.shaded.${it.tokenize('.').last()}")
        }
    }

    build {
        dependsOn shadowJar, publishToMavenLocal
        doLast {
            distribute
        }
    }

    clean {
        dependsOn deleteDistributedArtifacts
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            from project.shadow.component(publication)
            artifactId = "${rootProject.name}"
        }
    }
}

def cloudVersion = '1.5.0'
dependencies {
    api project(':moneybox-api')
    api project(':moneybox-environment')
    api project(':moneybox-r2dbc')

    api "cloud.commandframework:cloud-core:$cloudVersion"
    api "cloud.commandframework:cloud-bukkit:$cloudVersion"
    api "cloud.commandframework:cloud-minecraft-extras:$cloudVersion"

    api 'com.google.guava:guava:31.0.1-jre'

    compileOnly 'org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT'
    annotationProcessor 'org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT'
}
